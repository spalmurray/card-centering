import cv2 as cv
import numpy as np
from typing import Any, Tuple
from matplotlib import pyplot as plt


class Card:
    """A playing card with a border."""
    path: str
    _outbox: Any
    _inbox: Any

    def __init__(self, path: str) -> None:
        """Initialize a new Card object."""
        self.path = path
        self._init_boxes()

    def _init_boxes(self) -> None:
        """Initialize the boxes representing the border of the card. Uses cv2's
        find contours functionality.
        """
        img = cv.imread(self.path, 0)
        ret, img = cv.threshold(img, 127, 255, 0)
        kernel = np.ones((4, 4), np.float32) / 25
        img = cv.morphologyEx(img, cv.MORPH_OPEN, kernel)
        dst = cv.filter2D(img, -1, kernel)
        contours, hierarchy = cv.findContours(dst, 1, 2)
        max = contours[0]
        in_max = contours[0]
        for contour in contours:
            if cv.contourArea(contour) > cv.contourArea(max):
                max, in_max = contour, max
            elif cv.contourArea(contour) > cv.contourArea(in_max):
                in_max = contour
        max_rect = cv.minAreaRect(max)
        max_box = cv.boxPoints(max_rect)
        self._outbox = np.int0(max_box)
        in_rect = cv.minAreaRect(in_max)
        in_box = cv.boxPoints(in_rect)
        self._inbox = np.int0(in_box)

    def get_centering(self) -> Tuple[float, float]:
        """Return a tuple representing the ratio of the border side distribution
        at the worst centered measurement.
        """
        vertical_ratio = self.get_vertical_centering()
        horizontal_ratio = self.get_horizontal_centering()
        if vertical_ratio[0] > horizontal_ratio[0]:
            return vertical_ratio
        else:
            return horizontal_ratio

    def get_vertical_centering(self) -> Tuple[float, float]:
        """Return a tuple representing the ratio of the vertical border
        distribution of this card.
        """
        ib = self._inbox
        ob = self._outbox
        top_in_y = ((ib[0][1] + ib[3][1]) / 2)
        top_out_y = ((ob[0][1] + ob[3][1]) / 2)
        bot_in_y = ((ib[1][1] + ib[2][1]) / 2)
        bot_out_y = ((ob[1][1] + ob[2][1]) / 2)
        top_delta = top_out_y - top_in_y
        bot_delta = bot_in_y - bot_out_y
        top = round(top_delta / (top_delta + bot_delta), 4) * 100
        bot = round(bot_delta / (top_delta + bot_delta), 4) * 100
        return max(top, bot), min(top, bot)

    def get_horizontal_centering(self) -> Tuple[float, float]:
        """Return a tuple representing the ratio of the horizontal border
        distribution of this card.
        """
        ib = self._inbox
        ob = self._outbox
        left_in_x = ((ib[0][0]) + ib[1][0] / 2)
        left_out_x = ((ob[0][0] + ob[1][0]) / 2)
        right_in_x = ((ib[3][0] + ib[2][0]) / 2)
        right_out_x = ((ob[3][0] + ob[2][0]) / 2)
        left_delta = left_in_x - left_out_x
        right_delta = right_out_x - right_in_x
        left = round(left_delta / (left_delta + right_delta), 4) * 100
        right = round(right_delta / (left_delta + right_delta), 4) * 100
        return max(left, right), min(left, right)

    def show(self) -> None:
        """Displays a pyplot containing the input image and an image of the
        border bounding boxes generated by this tool."""
        org = cv.imread(self.path)
        img = cv.imread(self.path, 0)
        ret, img = cv.threshold(img, 127, 255, 0)
        kernel = np.ones((4, 4), np.float32) / 25
        img = cv.morphologyEx(img, cv.MORPH_OPEN, kernel)
        dst = cv.filter2D(img, -1, kernel)
        canvas = cv.cvtColor(dst, cv.COLOR_GRAY2BGR)
        cv.drawContours(canvas, [self._outbox], -1, (0, 0, 255), 3)
        cv.drawContours(canvas, [self._inbox], -1, (0, 255, 0), 3)
        plt.subplot(121), plt.imshow(cv.cvtColor(org, cv.COLOR_BGR2RGB))
        plt.title('Input Image'), plt.xticks([]), plt.yticks([])
        plt.subplot(122), plt.imshow(cv.cvtColor(canvas, cv.COLOR_BGR2RGB))
        plt.title(f'Border Box {self.get_centering()}'), plt.xticks(
            []), plt.yticks([])
        plt.show()

    def save(self) -> None:
        """Saves a pyplot containing the input image and an image of the border
        bounding boxes generated by this tool to the same directory as the input
        path."""
        org = cv.imread(self.path)
        img = cv.imread(self.path, 0)
        ret, img = cv.threshold(img, 127, 255, 0)
        kernel = np.ones((4, 4), np.float32) / 25
        img = cv.morphologyEx(img, cv.MORPH_OPEN, kernel)
        dst = cv.filter2D(img, -1, kernel)
        canvas = cv.cvtColor(dst, cv.COLOR_GRAY2BGR)
        cv.drawContours(canvas, [self._outbox], -1, (0, 0, 255), 3)
        cv.drawContours(canvas, [self._inbox], -1, (0, 255, 0), 3)
        plt.subplot(121), plt.imshow(cv.cvtColor(org, cv.COLOR_BGR2RGB))
        plt.title('Input Image'), plt.xticks([]), plt.yticks([])
        plt.subplot(122), plt.imshow(cv.cvtColor(canvas, cv.COLOR_BGR2RGB))
        plt.title(f'Border Box {self.get_centering()}'), plt.xticks(
            []), plt.yticks([])
        plt.savefig('/'.join(self.path.split('/')[:-1]) +
                    f'/{self.path.split("/")[-1].split(".")[0]}'
                    f'_centering.jpg')


if __name__ == "__main__":
    card = Card('img3.jpg')
